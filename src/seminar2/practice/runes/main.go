package main

import (
	"fmt"
	"unicode"
	"unicode/utf8"
)

// type rune = int32

func checkRune(r rune) {
	fmt.Printf("–†—É–Ω–∞: %c\n", r)
	fmt.Printf("IsLetter: %t\n", unicode.IsLetter(r))
	fmt.Printf("IsDigit: %t\n", unicode.IsDigit(r))
	fmt.Printf("IsSpace: %t\n", unicode.IsSpace(r))
	fmt.Printf("IsLower: %t\n", unicode.IsLower(r))
	fmt.Printf("ToUpper: %c\n", unicode.ToUpper(r))
	fmt.Printf("ToLower: %c\n", unicode.ToLower(r))
	fmt.Println()
}

func utf8Info(s string) {
	fmt.Printf("–°—Ç—Ä–æ–∫–∞: %s\n", s)
	fmt.Printf("–î–ª–∏–Ω–∞ –≤ –±–∞–π—Ç–∞—Ö: %d\n", len(s))
	fmt.Printf("–î–ª–∏–Ω–∞ –≤ —Ä—É–Ω–∞—Ö: %d\n", utf8.RuneCountInString(s))

	// –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ä—É–Ω—ã
	r, size := utf8.DecodeRuneInString(s)
	fmt.Printf("–ü–µ—Ä–≤–∞—è —Ä—É–Ω–∞: %c, —Ä–∞–∑–º–µ—Ä: %d –±–∞–π—Ç\n", r, size)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ UTF-8
	fmt.Printf("–í–∞–ª–∏–¥–Ω–∞—è UTF-8: %t\n", utf8.ValidString(s))
	fmt.Println()
}

func runeToBytes(r rune) []byte {
	buf := make([]byte, utf8.UTFMax)
	n := utf8.EncodeRune(buf, r)
	return buf[:n]
}

func bytesToRune(b []byte) (rune, int) {
	return utf8.DecodeRune(b)
}

func main() {
	s := "–ü—Ä–∏–≤–µ—Ç"
	fmt.Println(len(s))

	s = "Hello, ‰∏ñÁïå"
	runes := []rune(s)
	fmt.Printf("–°—Ç—Ä–æ–∫–∞: %s\n", s)
	fmt.Printf("–î–ª–∏–Ω–∞ –≤ –±–∞–π—Ç–∞—Ö: %d\n", len(s))
	fmt.Printf("–î–ª–∏–Ω–∞ –≤ —Ä—É–Ω–∞—Ö: %d\n", len(runes))
	fmt.Printf("–†—É–Ω—ã: %v\n", runes)

	s = "–ü—Ä–∏–≤–µ—Ç"
	for i := 0; i < len(s); i++ {
		fmt.Printf("%c ", s[i]) // –ë—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –µ—Ä—É–Ω–¥—É
	}

	fmt.Println()

	s = "–ü—Ä–∏–≤–µ—Ç"
	for _, r := range s {
		fmt.Printf("%c ", r) // –ü —Ä –∏ –≤ –µ —Ç
	}

	fmt.Println()

	// –õ–∏—Ç–µ—Ä–∞–ª—ã —Ä—É–Ω
	r1 := 'A'          // —Ä—É–Ω–∞ 'A'
	r2 := '‰∏ñ'          // —Ä—É–Ω–∞ '‰∏ñ'
	r3 := '\u4e16'     // —Ä—É–Ω–∞ '‰∏ñ' —á–µ—Ä–µ–∑ Unicode-escape
	r4 := '\U0001f600' // —Ä—É–Ω–∞ 'üòÄ' (—Å–º–∞–π–ª–∏–∫)

	fmt.Printf("%c %c %c %c\n", r1, r2, r3, r4)

	checkRune(r1)
	checkRune(r2)
	checkRune(r3)
	checkRune(r4)

	utf8Info("Hello")
	utf8Info("‰∏ñÁïå")
	utf8Info("H‚Ç¨llo")

	s = "cafeÃÅ" // "caf√©" —Å –∞–∫—Ü–µ–Ω—Ç–æ–º (4 —Å–∏–º–≤–æ–ª–∞, 5 –±–∞–π—Ç)

	// –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - —Ä–∞–±–æ—Ç–∞ —Å –±–∞–π—Ç–∞–º–∏
	fmt.Println("–ë–∞–π—Ç–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥:")
	for i := 0; i < len(s); i++ {
		fmt.Printf("–ë–∞–π—Ç %d: %c\n", i, s[i])
	}
	fmt.Printf("–î–ª–∏–Ω–∞ –≤ –±–∞–π—Ç–∞—Ö: %d\n", len(s))

	// –ü—Ä–∞–≤–∏–ª—å–Ω–æ - —Ä–∞–±–æ—Ç–∞ —Å —Ä—É–Ω–∞–º–∏
	fmt.Println("\n–†—É–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥:")
	for i, r := range s {
		fmt.Printf("–†—É–Ω–∞ %d: %c\n", i, r)
	}
	fmt.Printf("–î–ª–∏–Ω–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö: %d\n", utf8.RuneCountInString(s))

	r := '‰∏ñ'
	bytes := runeToBytes(r)
	fmt.Printf("–†—É–Ω–∞ %c –≤ –±–∞–π—Ç–∞—Ö: %v\n", r, bytes)

	restoredRune, size := bytesToRune(bytes)
	fmt.Printf("–ë–∞–π—Ç—ã %v –≤ —Ä—É–Ω—É: %c (—Ä–∞–∑–º–µ—Ä: %d –±–∞–π—Ç)\n",
		bytes, restoredRune, size)
}
